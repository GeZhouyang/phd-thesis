
@article{fluiddyn,
  title = {{{FluidDyn}}: A {{Python}} Open-Source Framework for Research and Teaching in Fluid Dynamics},
  volume = {(Submitted)},
  journaltitle = {J. Open Research Software},
  shortjournal = {J Open Res. Softw.},
  date = {2018},
  author = {Augier, Pierre and Mohanan, Ashwin Vishnu and Bonamy, Cyrille}
}

@article{fluidfft,
  title = {{{FluidFFT}}: Common {{API}} ({{C}}++ and {{Python}}) for {{Fast Fourier Transform}} Libraries},
  volume = {(Submitted)},
  journaltitle = {J. Open Research Software},
  shortjournal = {J Open Res. Softw.},
  date = {2018},
  author = {Mohanan, Ashwin Vishnu and Bonamy, Cyrille and Augier, Pierre}
}

@article{fluidsim,
  title = {{{FluidSim}}: Modular, Object-Oriented {{Python}} Package for High-Performance {{CFD}} Simulations},
  volume = {(Submitted)},
  journaltitle = {J. Open Research Software},
  shortjournal = {J Open Res. Softw.},
  date = {2018},
  author = {Mohanan, Ashwin Vishnu and Bonamy, Cyrille and Augier, Pierre}
}

@article{LeclercqPartridgeAugierDalzielKerswell2016,
  title = {Using Stratification to Mitigate End Effects in Quasi-{{Keplerian Taylor}}â€“{{Couette}} Flow},
  volume = {791},
  doi = {10.1017/jfm.2016.44},
  journaltitle = {J. Fluid Mech.},
  shortjournal = {J Fluid Mech},
  date = {2016-03},
  pages = {608-630},
  author = {Leclercq, C. and Partridge, J. L. and Augier, P. and Dalziel, S. B. and Kerswell, R. R.}
}

@inproceedings{ISSF2016,
  title = {First Report of the {{MILESTONE}} Experiment: Strongly Stratified Turbulence and Mixing Efficiency in the {{Coriolis}} Platform},
  date = {2016},
  author = {Campagne, A. and Alfredsson, H. and Chassagne, R. and Micard, D. and Mordant, N. and Segalini, A. and Sommeria, J. and Viboud, S. and Mohanan, A. Vishnu and Lindborg, E. and Augier, P.},
  venue = {VIIIth International Symposium on Stratified Flows (ISSF, San Diego, USA)}
}

@article{LindborgMohanan2017,
  title = {A Two-Dimensional Toy Model for Geophysical Turbulence},
  volume = {29},
  doi = {10.1063/1.4985990},
  number = {11},
  journaltitle = {Phys. Fluids},
  shortjournal = {Phys Fluids},
  date = {2017},
  pages = {111114},
  author = {Lindborg, Erik and Mohanan, Ashwin Vishnu}
}

@article{behnel_cython2011,
  title = {Cython: {{The Best}} of {{Both Worlds}}},
  volume = {13},
  issn = {1521-9615},
  doi = {10.1109/MCSE.2010.118},
  shorttitle = {Cython},
  number = {2},
  journaltitle = {Computing in Science \& Engineering},
  shortjournal = {Comput. Sci. Eng.},
  date = {2011-03},
  pages = {31-39},
  author = {Behnel, Stefan and Bradshaw, Robert and Citro, Craig and Dalcin, Lisandro and Seljebotn, Dag Sverre and Smith, Kurt}
}

@inproceedings{jasak_openfoam2007,
  title = {{{OpenFOAM}}: {{A C}}++ Library for Complex Physics Simulations},
  volume = {1000},
  shorttitle = {{{OpenFOAM}}},
  booktitle = {International Workshop on Coupled Methods in Numerical Dynamics},
  publisher = {{IUC Dubrovnik, Croatia}},
  date = {2007},
  pages = {1-20},
  author = {Jasak, Hrvoje and Jemcov, Aleksandar and Tukovic, Zeljko and others}
}

@inproceedings{guelton_pythran2013,
  title = {Pythran: {{Enabling Static Optimization}} of {{Scientific Python Programs}}},
  shorttitle = {Pythran},
  date = {2013},
  pages = {46-52},
  author = {Guelton, Serge and Brunet, Pierrick and Raynaud, Alan and Merlini, Adrien and Amini, Mehdi}
}

@article{guelton2018pythran,
  title = {Pythran: {{Crossing}} the {{Python Frontier}}},
  volume = {20},
  number = {2},
  journaltitle = {Computing in Science \& Engineering},
  shortjournal = {Comput. Sci. Eng.},
  date = {2018},
  pages = {83-89},
  author = {Guelton, Serge},
  publisher = {{IEEE}}
}

@article{pippig_pfft2013,
  title = {{{PFFT}}: {{An}} Extension of {{FFTW}} to Massively Parallel Architectures},
  volume = {35},
  shorttitle = {{{PFFT}}},
  number = {3},
  journaltitle = {SIAM Journal on Scientific Computing},
  shortjournal = {SIAM J. Sci. Comput.},
  date = {2013},
  pages = {C213-C236},
  author = {Pippig, Michael}
}

@article{pekurovsky2012p3dfft,
  title = {{{P3DFFT}}: {{A}} Framework for Parallel Computations of {{Fourier}} Transforms in Three Dimensions},
  volume = {34},
  number = {4},
  journaltitle = {SIAM Journal on Scientific Computing},
  shortjournal = {SIAM J. Sci. Comput.},
  date = {2012},
  pages = {C192-C209},
  author = {Pekurovsky, Dmitry},
  publisher = {{SIAM}}
}

@article{mortensen_spectraldns2016,
  title = {High Performance {{Python}} for Direct Numerical Simulations of Turbulent Flows},
  volume = {203},
  issn = {0010-4655},
  doi = {10.1016/j.cpc.2016.02.005},
  abstract = {Direct Numerical Simulations (DNS) of the Navier Stokes equations is an invaluable research tool in fluid dynamics. Still, there are few publicly available research codes and, due to the heavy number crunching implied, available codes are usually written in low-level languages such as C/C++ or Fortran. In this paper we describe a pure scientific Python pseudo-spectral DNS code that nearly matches the performance of C++ for thousands of processors and billions of unknowns. We also describe a version optimized through Cython, that is found to match the speed of C++. The solvers are written from scratch in Python, both the mesh, the MPI domain decomposition, and the temporal integrators. The solvers have been verified and benchmarked on the Shaheen supercomputer at the KAUST supercomputing laboratory, and we are able to show very good scaling up to several thousand cores. A very important part of the implementation is the mesh decomposition (we implement both slab and pencil decompositions) and 3D parallel Fast Fourier Transforms (FFT). The mesh decomposition and FFT routines have been implemented in Python using serial FFT routines (either NumPy, pyFFTW or any other serial FFT module), NumPy array manipulations and with MPI communications handled by MPI for Python (mpi4py). We show how we are able to execute a 3D parallel FFT in Python for a slab mesh decomposition using 4 lines of compact Python code, for which the parallel performance on Shaheen is found to be slightly better than similar routines provided through the FFTW library. For a pencil mesh decomposition 7 lines of code is required to execute a transform.},
  issue = {Supplement C},
  journaltitle = {Computer Physics Communications},
  shortjournal = {Comput. Phys. Commun.},
  date = {2016-06},
  pages = {53-65},
  keywords = {CFD,Python,Cython,DNS,FFT,MPI,Pencil,Slab,Computer Science - Mathematical Software,and Cluster Computing,Computer Science - Distributed,Parallel},
  author = {Mortensen, Mikael and Langtangen, Hans Petter}
}

@article{burns_dedalus,
  title = {Dedalus: {{A Flexible Pseudo}}-{{Spectral Framework}} for {{Solving Partial Differential Equations}}},
  url = {https://dedalus-project.org},
  author = {Burns, KJ and Vasil, GM and Oishi, JS and Lecoanet, D and Brown, BP and Quataert, E},
  publisher = {{preparation}}
}

@report{hooton_christopher_refreshing_2017,
  langid = {american},
  title = {Refreshing {{Our Understanding}} of the {{Internet Economy}}},
  abstract = {Internet Association's first economic white paper takes a closer look at the size of the internet economy, both in the U.S. and abroad.},
  date = {2017-01},
  author = {Hooton, Christopher}
}

@article{wilson_best_2014,
  langid = {english},
  title = {Best {{Practices}} for {{Scientific Computing}}},
  volume = {12},
  issn = {1545-7885},
  doi = {10.1371/journal.pbio.1001745},
  abstract = {We describe a set of best practices for scientific software development, based on research and experience, that will improve scientists' productivity and the reliability of their software.},
  number = {1},
  journaltitle = {PLOS Biology},
  shortjournal = {PLOS Biol.},
  date = {2014-01},
  pages = {1-7},
  keywords = {Computer software,Computers,Open source software,Programming languages,Research validity,Scientists,Software development,Software tools},
  author = {Wilson, Greg and Aruliah, D. A. and Brown, C. Titus and Hong, Neil P. Chue and Davis, Matt and Guy, Richard T. and Haddock, Steven H. D. and Huff, Kathryn D. and Mitchell, Ian M. and Plumbley, Mark D. and Waugh, Ben and White, Ethan P. and Wilson, Paul}
}

@inproceedings{nanz_comparative_2015,
  title = {A {{Comparative Study}} of {{Programming Languages}} in {{Rosetta Code}}},
  volume = {1},
  doi = {10.1109/ICSE.2015.90},
  abstract = {Sometimes debates on programming languages are more religious than scientific. Questions about which language is more succinct or efficient, or makes developers more productive are discussed with fervor, and their answers are too often based on anecdotes and unsubstantiated beliefs. In this study, we use the largely untapped research potential of Rosetta Code, a code repository of solutions to common programming tasks in various languages, which offers a large data set for analysis. Our study is based on 7'087 solution programs corresponding to 745 tasks in 8 widely used languages representing the major programming paradigms (procedural: C and Go, object-oriented: C\# and Java, functional: F\# and Haskell, scripting: Python and Ruby). Our statistical analysis reveals, most notably, that: functional and scripting languages are more concise than procedural and object-oriented languages, C is hard to beat when it comes to raw speed on large inputs, but performance differences over inputs of moderate size are less pronounced and allow even interpreted languages to be competitive, compiled strongly-typed languages, where more defects can be caught at compile time, are less prone to runtime failures than interpreted or weakly-typed languages. We discuss implications of these results for developers, language designers, and educators.},
  booktitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}}},
  date = {2015-05},
  pages = {778-788},
  keywords = {Python,authoring languages,Java,Runtime,code repository,functional language,functional languages,Go,Haskell,Indexes,language interpretation,object-oriented language,object-oriented programming,procedural language,program compilers,program interpreters,Programming,programming languages,Rosetta Code,Ruby,scripting language,Standards,statistical analysis,Statistical analysis,strongly-typed language compilation,C\\\#,F\\\#},
  author = {Nanz, S. and Furia, C. A.}
}

@article{ousterhout_scripting_1998,
  title = {Scripting: Higher Level Programming for the 21st {{Century}}},
  volume = {31},
  issn = {0018-9162},
  doi = {10.1109/2.660187},
  shorttitle = {Scripting},
  abstract = {A fundamental change is occurring in the way people write computer programs, away from system programming languages such as C or C++ to scripting languages such as Perl or Tcl. Although many people are participating in the change, few realize that the change is occurring and even fewer know why it is happening. This article explains why scripting languages will handle many of the programming tasks in the next century better than system programming languages. System programming languages were designed for building data structures and algorithms from scratch, starting from the most primitive computer elements. Scripting languages are designed for gluing. They assume the existence of a set of powerful components and are intended primarily for connecting components},
  number = {3},
  journaltitle = {Computer},
  date = {1998-03},
  pages = {23-30},
  keywords = {21st Century,Algorithm design and analysis,Application software,Assembly systems,authoring languages,Automatic generation control,Buildings,C,C++,Computer aided instruction,Computer languages,data structures,higher level programming,Perl,Program processors,programming,Programming profession,Registers,scripting,scripting languages,software components,system programming languages,Tcl},
  author = {Ousterhout, J. K.}
}

@article{prechelt_empirical_2000,
  title = {An Empirical Comparison of Seven Programming Languages},
  volume = {33},
  issn = {0018-9162},
  doi = {10.1109/2.876288},
  abstract = {Often heated, debates regarding different programming languages' effectiveness remain inconclusive because of scarce data and a lack of direct comparisons. The author addresses that challenge, comparatively analyzing 80 implementations of the phone-code program in seven different languages (C, C++, Java, Perl, Python, Rexx and Tcl). Further, for each language, the author analyzes several separate implementations by different programmers. The comparison investigates several aspects of each language, including program length, programming effort, runtime efficiency, memory consumption, and reliability. The author uses comparisons to present insight into program language performance},
  number = {10},
  journaltitle = {Computer},
  date = {2000-10},
  pages = {23-29},
  keywords = {Python,authoring languages,C++,Computer languages,Perl,Program processors,programming,Programming profession,Tcl,C language,C++ language,Java,memory consumption,phone-code program,Production,program language performance,program length,programming language comparison,Read-write memory,Rexx,Runtime,runtime efficiency,software reliability,Statistics,Sun,Workstations},
  author = {Prechelt, L.}
}

@article{language_productivity_infographic,
  title = {Language\_productivity.Pdf},
  url = {http://www.connellybarnes.com/documents/language_productivity.pdf},
  urldate = {2018-02-08}
}

@article{fitzgerald_transformation_2006,
  title = {The {{Transformation}} of {{Open Source Software}}},
  volume = {30},
  issn = {0276-7783},
  doi = {10.2307/25148740},
  abstract = {A frequent characterization of open source software is the somewhat outdated, mythical one of a collective of supremely talented software hackers freely volunteering their services to produce uniformly high-quality software. I contend that the open source software phenomenon has metamorphosed into a more mainstream and commercially viable form, which I label as OSS 2.0. I illustrate this transformation using a framework of process and product factors, and discuss how the bazaar metaphor, which up to now has been associated with the open source development process, has actually shifted to become a metaphor better suited to the OSS 2.0 product delivery and support process. Overall the OSS 2.0 phenomenon is significantly different from its free software antecedent. Its emergence accentuates the fundamental alteration of the basic ground rules in the software landscape, signifying the end of the proprietary-driven model that has prevailed for the past 20 years or so. Thus, a clear understanding of the characteristics of the emergent OSS 2.0 phenomenon is required to address key challenges for research and practice.},
  number = {3},
  journaltitle = {MIS Quarterly},
  shortjournal = {MIS Q.},
  date = {2006},
  pages = {587-598},
  author = {Fitzgerald, Brian}
}

@article{guelton2015pythran,
  title = {Pythran: {{Enabling}} Static Optimization of Scientific Python Programs},
  volume = {8},
  number = {1},
  journaltitle = {Computational Science \& Discovery},
  shortjournal = {Comput. Sci. Discov.},
  date = {2015},
  pages = {014001},
  author = {Guelton, Serge and Brunet, Pierrick and Amini, Mehdi and Merlini, Adrien and Corbillon, Xavier and Raynaud, Alan},
  publisher = {{IOP Publishing}}
}

@inproceedings{guelton2014exploring,
  title = {Exploring the Vectorization of Python Constructs Using Pythran and Boost {{SIMD}}},
  booktitle = {Proceedings of the 2014 {{Workshop}} on {{Programming}} Models for {{SIMD}}/{{Vector}} Processing},
  date = {2014},
  pages = {79-86},
  author = {Guelton, Serge and Falcou, JoÃ«l and Brunet, Pierrick},
  organization = {{ACM}}
}

@article{guelton2013compiling,
  title = {Compiling {{Python}} Modules to Native Parallel Modules Using {{Pythran}} and {{OpenMP}} Annotations},
  volume = {2013},
  journaltitle = {Python for High Performance and Scientific Computing},
  shortjournal = {Python High Perform. Sci. Comput.},
  date = {2013},
  author = {Guelton, Serge and Brunet, Pierrick and Amini, Mehdi}
}

@article{salort2018,
  title = {A Local Sensor for Joint Temperature and Velocity Measurements in Turbulent Flows},
  volume = {89},
  number = {1},
  journaltitle = {Review of Scientific Instruments},
  shortjournal = {Rev. Sci. Instrum.},
  date = {2018},
  pages = {015005},
  author = {Salort, Julien and RusaouÃ«n, Ã‰lÃ©onore and Robert, Laurent and Du Puits, Ronald and Loesch, Alice and Pirotte, Olivier and Roche, Philippe-E and Castaing, Bernard and ChillÃ , Francesca}
}

@book{meyers2012effective,
  title = {Effective {{C}}++ {{Digital Collection}}: 140 {{Ways}} to {{Improve Your Programming}}},
  url = {https://n2t.net/ark:/13960/t2d86nb9s},
  pagetotal = {542-546},
  publisher = {{Addison-Wesley}},
  date = {2012},
  author = {Meyers, Scott}
}

@article{DeloncleBillantChomaz2008,
  title = {Nonlinear Evolution of the Zigzag Instability in Stratified Fluids: A Shortcut on the Route to Dissipation},
  volume = {599},
  journaltitle = {Journal of Fluid Mechanics},
  shortjournal = {J. Fluid Mech.},
  date = {2008},
  pages = {229-239},
  author = {Deloncle, Axel and Billant, Paul and Chomaz, Jean-Marc},
  publisher = {{Cambridge University Press}}
}

@article{frigo2005design,
  title = {The Design and Implementation of {{FFTW3}}},
  volume = {93},
  number = {2},
  journaltitle = {Proceedings of the IEEE},
  shortjournal = {Proc. IEEE},
  date = {2005},
  pages = {216-231},
  author = {Frigo, Matteo and Johnson, Steven G},
  publisher = {{IEEE}}
}

@article{ascher1997implicit,
  title = {Implicit-Explicit {{Runge}}-{{Kutta}} Methods for Time-Dependent Partial Differential Equations},
  volume = {25},
  number = {2-3},
  journaltitle = {Applied Numerical Mathematics},
  shortjournal = {Appl. Numer. Math.},
  date = {1997},
  pages = {151-167},
  author = {Ascher, Uri M and Ruuth, Steven J and Spiteri, Raymond J},
  publisher = {{Elsevier}}
}

@article{BillantDeloncleChomazOtheguy2010,
  title = {Zigzag Instability of Vortex Pairs in Stratified and Rotating Fluids. {{Part}} 2. {{Analytical}} and Numerical Analyses.},
  volume = {660},
  doi = {10.1017/S002211201000282X},
  journaltitle = {J. Fluid Mech.},
  shortjournal = {J Fluid Mech},
  date = {2010},
  pages = {396--429},
  author = {Billant, P. and Deloncle, A. and Chomaz, J.-M. and Otheguy, P.},
  publisher = {{Cambridge University Press}}
}

@article{cooley_tukey,
  title = {An {{Algorithm}} for the {{Machine Calculation}} of {{Complex Fourier Series}}},
  volume = {19},
  number = {90},
  journaltitle = {Mathematics of Computation},
  shortjournal = {Math. Comput.},
  date = {1965},
  pages = {297-301},
  author = {Cooley, James W. and Tukey, John W.}
}

@incollection{canuto_algorithms_1988,
  langid = {english},
  title = {Some {{Algorithms}} for {{Unsteady Navier}}â€”{{Stokes Equations}}},
  isbn = {978-3-540-52205-8 978-3-642-84108-8},
  booktitle = {Spectral {{Methods}} in {{Fluid Dynamics}}},
  series = {Springer {{Series}} in {{Computational Physics}}},
  publisher = {{Springer, Berlin, Heidelberg}},
  date = {1988},
  pages = {201-239},
  author = {Canuto, Claudio and Hussaini, M. Yousuff and Quarteroni, Alfio and Zang, Thomas A.},
  doi = {10.1007/978-3-642-84108-8_7}
}

@inproceedings{ramachandran_pysph_2016,
  title = {{{PySPH}}: A Reproducible and High-Performance Framework for Smoothed Particle Hydrodynamics},
  doi = {10.25080/Majora-629e541a-011},
  booktitle = {Proceedings of the 15th {{Python}} in {{Science Conference}}},
  date = {2016},
  pages = {122-129},
  author = {Ramachandran, Prabhu},
  editor = {Benthall, Sebastian and Rostrup, Scott}
}


